name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Backend to AWS ECS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # Step 3: Restore dependencies
      - name: Restore dependencies
        working-directory: src/HostelFinder.WebApi
        run: dotnet restore

      # Step 4: Build the application
      - name: Build the application
        working-directory: src/HostelFinder.WebApi
        run: dotnet build --configuration Release --no-restore

      # Step 5: Publish the application
      - name: Publish the application
        working-directory: src/HostelFinder.WebApi
        run: dotnet publish --configuration Release --no-build --output ./publish

      # Step 6: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 7: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      # Step 8: Build, tag, and push Docker image
      - name: Build and push Docker image
        id: build-image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }} src/HostelFinder.WebApi
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 9: Update ECS service
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --force-new-deployment
